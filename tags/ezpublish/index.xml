<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ezpublish on Geeky Ramblings</title>
    <link>/tags/ezpublish/</link>
    <description>Recent content in Ezpublish on Geeky Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Oct 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/ezpublish/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Name eZ Publish web transaction in New Relic</title>
      <link>/post/name-ezpublish-web-transaction-in-ezpublish/</link>
      <pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/name-ezpublish-web-transaction-in-ezpublish/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;thumbnail text-center&#34; src=&#34;/images/post/2013-10/newrelic_transaction.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When using &lt;strong&gt;NewRelic PHP agent&lt;/strong&gt; with an eZ Publish stack. the profiled transactions will show under &lt;code&gt;/index.php&lt;/code&gt;. To get better insights of what makes your app struggle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NewRelic&lt;/strong&gt; provides a self explanatory &lt;a href=&#34;https://docs.newrelic.com/docs/php/the-php-api&#34;&gt;&lt;strong&gt;PHP API&lt;/strong&gt;&lt;/a&gt;. This API lets you send additional metrics/data along by the ones the agent already gathers.&lt;/p&gt;

&lt;p&gt;The eZ Publish extension &lt;a href=&#34;https://github.com/killerwolf/ezpublish-newrelic&#34;&gt;&lt;strong&gt;ezpublish-newrelic&lt;/strong&gt;&lt;/a&gt; I wrote allows you to track modules and theires views under a separate transaction name.&lt;/p&gt;

&lt;p&gt;Code source is hosted on &lt;a href=&#34;https://github.com/killerwolf/ezpublish-newrelic&#34;&gt;GitHub&lt;/a&gt; and is available for install on &lt;a href=&#34;https://packagist.org/packages/killerwolf/ezpublish-newrelic&#34;&gt;&lt;strong&gt;Packagist&lt;/strong&gt;&lt;/a&gt; via &lt;strong&gt;Composer&lt;/strong&gt;, feel free to contribute.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>L’import RSS natif d’eZ Publish avec support de la balise enclosure</title>
      <link>/post/import-rss-natif-ez-publish-support-balise-enclosure/</link>
      <pubDate>Fri, 20 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/import-rss-natif-ez-publish-support-balise-enclosure/</guid>
      <description>

&lt;p&gt;&lt;img class=&#34;thumbnail pull-left&#34; src=&#34;/images/post/ezpublish_media_import_rss-150x150.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;le-besoin:9c6f926ca04ed334e17e208e483449a0&#34;&gt;Le besoin&lt;/h3&gt;

&lt;p&gt;eZ publish offre la possibilité sans écrire une seule ligne de code, d’importer des contenus d’un flux RSS, sous forme de contenus eZpublish. Mais cette fonctionnalité native ne permet pas d’importer les média inclus dans la balise &lt;code&gt;&amp;lt;enclosure&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Je vais donc vous montrer comme vous permettre de récupérer ce media (image ou autre fichier tel que pdf, doc ou flv) et de l’insérer de manière transparente dans vos contenus eZ Publish.
Cette fonctionnalité est un peu codé en dur dans eZ Publish et n’est pas extensible proprement. Je vais vous la manière &lt;em&gt;Quick and dirty&lt;/em&gt; pour arriver à vos fin. A vous ensuite de choisir si vous voulez passer du temp à faire cela proprement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;enclosure url=&amp;quot;http://www.example.com/images/voiture.jpg&amp;quot; length=&amp;quot;&amp;quot; type=&amp;quot;image/jpeg&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;implémentation-quick-and-dirty:9c6f926ca04ed334e17e208e483449a0&#34;&gt;Implémentation quick and dirty&lt;/h3&gt;

&lt;p&gt;Voici les fichiers qui seront impacter par nos modifications. Ce sont des fichiers du noyau eZPublish&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La fonction &lt;code&gt;setObjectAttributeValue()&lt;/code&gt; dans le fichier &lt;code&gt;cronjobs/rssimport.php&lt;/code&gt; (script php apellé par crond pour aller récupérer les nouveaux items des flux RSS configurés en Back Office)&lt;/li&gt;
&lt;li&gt;La methode &lt;code&gt;rssFieldDefinition()&lt;/code&gt; dans le fichier &lt;code&gt;kernel/classes/ezrssimport.php&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La fonction &lt;code&gt;setObjectAttributeValue()&lt;/code&gt; permet de traiter la récupération des différents types d’attributs (ligne de texte, bloc xml), c’est donc ici que nous allons naturellement ajouter le traitement de notre attribut ezimage (cela fonctionne aussi avec ezfile). Nous allons rajouter le &lt;code&gt;case ‘ezimage’&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function setObjectAttributeValue( $objectAttribute, $value )
{
    //…
    switch( $dataType )
    {
        //…
        case ‘ezimage’:
        {
            $file = pathinfo($value);
            $image = eZHTTPTool::getDataByURL( $value );
            if($image !== false)
            {
                $fp = fopen(‘/tmp/’.$file[‘basename’],‘wb’);
                fwrite($fp, $image, strlen($image));
                fclose($fp);
                $objectAttribute-&amp;gt;fromString( ‘/tmp/’.$file[‘basename’] );
            }
        } break;
        //..
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Après s’être occupé d’apprendre à &lt;strong&gt;eZ Publish&lt;/strong&gt; comment traiter les ezimage. Nous allons maintenant ajouter &lt;code&gt;Item – Enclosure – Url&lt;/code&gt; dans le &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; (voir image plus haut). Occupons nous de la méthode &lt;code&gt;rssFieldDefinition()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case ’2.0′:
case ’0.91′:
case ’0.92′:
{
  return array( ‘item’ =&amp;gt; array( ‘elements’ =&amp;gt; array( ‘title’,
                                                      ‘link’,
                                                      ‘description’,
                                                      ‘author’,
                                                      ‘category’,
                                                      ‘comments’,
                                                      ‘guid’,
                                                      ‘pubDate’,
                                                      ‘enclosure’ =&amp;gt; array( ‘attributes’ =&amp;gt; array( ‘url’ ) ) ) ),
                ‘channel’ =&amp;gt; array( ‘elements’ =&amp;gt; array( ‘title’,
                                                         ‘link’,
                                                         ‘description’,
                                                         ‘copyright’,
                                                         ‘managingEditor’,
                                                         ‘webMaster’,
                                                         ‘pubDate’,
                                                         ‘lastBuildDate’,
                                                         ‘category’,
                                                         ‘generator’,
                                                         ‘docs’,
                                                         ‘cloud’,
                                                         ‘ttl’ ) ) );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;implémentation-plus-propre:9c6f926ca04ed334e17e208e483449a0&#34;&gt;Implémentation plus propre&lt;/h3&gt;

&lt;p&gt;Au lieu de modifier le cron &lt;code&gt;rssimport.php&lt;/code&gt; vous pouvez le copier dans votre extension y apporter les modifications pour le ezimage. Et appeler ce dernier au lieu du &lt;code&gt;rssimport.php&lt;/code&gt; par défaut d’eZ Publish.
La méthode &lt;code&gt;rssFieldDefinition()&lt;/code&gt; est utilisé dans une autre méthode de la même classe, on remarque la présence d’un hook qui permet d’étendre sa définition a partir des classes présentes dans nos extensions custom.
Voici le hook qui est dans la méthode &lt;code&gt;fieldMap()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$fieldDefinition = eZRSSImport::rssFieldDefinition();

$ini = eZINI::instance();
foreach( $ini-&amp;gt;variable( ‘RSSSettings’, ‘ActiveExtensions’ ) as $activeExtension )
{
    if ( file_exists( eZExtension::baseDirectory() . ‘/’ . $activeExtension . ‘/rss/’ . $activeExtension . ‘rssimport.php’ ) )
    {
        include_once( eZExtension::baseDirectory() . ‘/’ . $activeExtension . ‘/rss/’ . $activeExtension . ‘rssimport.php’ );
        $fieldDefinition = eZRSSImport::arrayMergeRecursive( $fieldDefinition, call_user_func( array(  $activeExtension . ‘rssimport’, ‘rssFieldDefinition’ ), array() ) );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il nous suffit donc de créer une classe dans &lt;code&gt;extension/monextension/rss/ezrssimage.php&lt;/code&gt; avec ce code, avec une methode du même nom: &lt;code&gt;rssFieldDefinition()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ezrssimagerssimport
{
    static function rssFieldDefinition()
    {
        return array( ‘item’ =&amp;gt; array( ‘elements’ =&amp;gt; array( ‘enclosure’ =&amp;gt; array( ‘attributes’ =&amp;gt; array( ‘url’ ) ) ) ) );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;et de déclarer cette classe dans le fichier &lt;code&gt;monextension/settings/site.ini.append.php&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[RSSSettings]
ActiveExtensions[]=ezrssimage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voila pour ce tutoriel. Si je trouve le temps je packagerai cela dans une extension que je publierai sur &lt;strong&gt;GitHub&lt;/strong&gt; ou &lt;strong&gt;projects.ez.no&lt;/strong&gt; (sauf si quelqu&amp;rsquo;un me devance d’ici là).
N’hésitez pas à me signaler des erreurs ou améliorations que vous jugerez utiles.&lt;/p&gt;

&lt;p&gt;Vous pouvez retrouver les snippets PHP précédent ici &lt;a href=&#34;https://gist.github.com/killerwolf/5430167&#34;&gt;https://gist.github.com/killerwolf/5430167&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Filtre custom ImageMagick pour eZ Publish</title>
      <link>/post/filtre-custom-imagemagick-pour-ez-publish/</link>
      <pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/filtre-custom-imagemagick-pour-ez-publish/</guid>
      <description>&lt;p&gt;Les filtres par défaut d’&lt;strong&gt;eZ Publish&lt;/strong&gt;, ne vous permettent pas de rogner les images pour les faire entrer dans des dimensions précises. Le fichier de conf &lt;code&gt;image.ini&lt;/code&gt; vous permet d’implémenter sous &lt;strong&gt;eZ Publish&lt;/strong&gt; toutes les possibilités offertes par les outils CLI d’&lt;strong&gt;ImageMagick&lt;/strong&gt;. Voici 2 filtres qui effectuent la même tâche mais avec 2 manières différentes: rogner et redimensionner les images, libre à vous de les utiliser avec vos Alias&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Filters[]=geometry/thumbnailize=-thumbnail &amp;quot;%1x%2^&amp;quot; -gravity center -extent %1x%2
Filters[]=geometry/thumbnailize2=-geometry %1x%2^ -gravity center -crop %1x%2+0+0 +repage
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>